---
name: Recurring Sanity Test

on:
  schedule:
    - cron: "0 7 * * 1-5"
  workflow_dispatch:

env:
  CLOUD_PROVIDER_VERSION: "5.95.0"
  HOSTNAME_PREFIX: tfp-sanity
  LOCALS_PROVIDER_VERSION: "2.5.2"
  PACKAGE: sanity
  RANCHER_VERSION: ""
  RANCHER2_PROVIDER_VERSION: "7.0.0"
  RKE_PROVIDER_VERSION: "1.7.0"
  RKE2_VERSION: ""
  RKE2_VERSION_2_9: v1.30.12+rke2r1
  RKE2_VERSION_2_10: v1.31.8+rke2r1
  RKE2_VERSION_2_11: v1.32.4+rke2r1
  RKE2_VERSION_2_12: v1.32.4+rke2r1
  SUITE: ^TestTfpSanityProvisioningTestSuite$
  TERRAFORM_VERSION: "1.12.1"
  TIMEOUT: 2h
  QASE_TEST_RUN_ID: ""
  QASE_TEST_RUN_ID_2_9: "4540"
  QASE_TEST_RUN_ID_2_10: "4542"
  QASE_TEST_RUN_ID_2_11: "4541"
  QASE_TEST_RUN_ID_2_12: "4512"

jobs:
  v2-12-head:
    name: v2.12-head
    runs-on: ubuntu-latest
    environment: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_VERSION
          value: head

      - name: Set RKE2 version
        uses: ./.github/actions/set-env-var
        with:
          key: RKE2_VERSION
          value: ${{ env.RKE2_VERSION_2_12 }}

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ env.QASE_TEST_RUN_ID_2_12 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              windowsAMI: "${{ secrets.WINDOWS_AMI }}"
              windowsAWSUser: "${{ secrets.AWS_WINDOWS_USER }}" 
              windowsAWSPassword: "${{ secrets.AWS_WINDOWS_PASSWORD }}"
              windowsInstanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
              windowsKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ env.RANCHER_VERSION }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ env.RKE2_VERSION }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            nodeCount: ${{ vars.NODE_COUNT }}
            windowsNodeCount: ${{ vars.WINDOWS_NODE_COUNT }}
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Run Sanity Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.TIMEOUT }}

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ env.QASE_TEST_RUN_ID }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}

  v2-11-head:
    name: v2.11-head
    runs-on: ubuntu-latest
    environment: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_VERSION
          value: v2.11-head

      - name: Set RKE2 version
        uses: ./.github/actions/set-env-var
        with:
          key: RKE2_VERSION
          value: ${{ env.RKE2_VERSION_2_11 }}

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ env.QASE_TEST_RUN_ID_2_11 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              windowsAMI: "${{ secrets.WINDOWS_AMI }}"
              windowsAWSUser: "${{ secrets.AWS_WINDOWS_USER }}" 
              windowsAWSPassword: "${{ secrets.AWS_WINDOWS_PASSWORD }}"
              windowsInstanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
              windowsKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherTagVersion: "${{ env.RANCHER_VERSION }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ env.RKE2_VERSION }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            nodeCount: ${{ vars.NODE_COUNT }}
            windowsNodeCount: ${{ vars.WINDOWS_NODE_COUNT }}
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Run Sanity Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.TIMEOUT }}

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ env.QASE_TEST_RUN_ID }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}

  v2-10-head:
    name: v2.10-head
    runs-on: ubuntu-latest
    environment: staging-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_VERSION
          value: v2.10-head

      - name: Set RKE2 version
        uses: ./.github/actions/set-env-var
        with:
          key: RKE2_VERSION
          value: ${{ env.RKE2_VERSION_2_10 }}

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ env.QASE_TEST_RUN_ID_2_10 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              windowsAMI: "${{ secrets.WINDOWS_AMI }}"
              windowsAWSUser: "${{ secrets.AWS_WINDOWS_USER }}" 
              windowsAWSPassword: "${{ secrets.AWS_WINDOWS_PASSWORD }}"
              windowsInstanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
              windowsKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherAgentImage: "${{ secrets.RANCHER_AGENT_IMAGE }}"
              rancherTagVersion: "${{ env.RANCHER_VERSION }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ env.RKE2_VERSION }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            nodeCount: ${{ vars.NODE_COUNT }}
            windowsNodeCount: ${{ vars.WINDOWS_NODE_COUNT }}
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Run Sanity Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.TIMEOUT }}

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ env.QASE_TEST_RUN_ID }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}

  v2-9-head:
    name: v2.9-head
    runs-on: ubuntu-latest
    environment: staging-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up SSH Keys
        uses: ./.github/actions/setup-ssh-keys
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-private-key-name: ${{ secrets.SSH_PRIVATE_KEY_NAME }}
          windows-ssh-private-key: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY }}
          windows-ssh-private-key-name: ${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}

      - name: Uniquify hostname prefix
        uses: ./.github/actions/uniquify-hostname

      - name: Set Rancher version
        uses: ./.github/actions/set-env-var
        with:
          key: RANCHER_VERSION
          value: v2.9-head

      - name: Set RKE2 version
        uses: ./.github/actions/set-env-var
        with:
          key: RKE2_VERSION
          value: ${{ env.RKE2_VERSION_2_9 }}

      - name: Set Qase Test Run ID
        uses: ./.github/actions/set-env-var
        with:
          key: QASE_TEST_RUN_ID
          value: ${{ env.QASE_TEST_RUN_ID_2_9 }}

      - name: Create config.yaml
        run: |
          cat > config.yaml <<EOF
          rancher:
            host: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
            adminPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
            insecure: true
          terraform:
            cni: "${{ secrets.CNI }}"
            defaultClusterRoleForProjectMembers: "true"
            enableNetworkPolicy: false
            provider: "${{ vars.PROVIDER_AMAZON }}"
            privateKeyPath: "${{ secrets.SSH_PRIVATE_KEY_PATH }}"
            resourcePrefix: "${{ env.HOSTNAME_PREFIX }}"
            windowsPrivateKeyPath: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_PATH }}"
            awsCredentials:
              awsAccessKey: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              awsSecretKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            awsConfig:
              ami: "${{ secrets.AWS_AMI }}"
              awsKeyName: "${{ secrets.SSH_PRIVATE_KEY_NAME }}"
              awsInstanceType: "${{ vars.AWS_INSTANCE_TYPE }}"
              awsVolumeType: "${{ vars.AWS_VOLUME_TYPE }}"
              region: "${{ secrets.AWS_REGION }}"
              awsSecurityGroups: [${{ secrets.AWS_SECURITY_GROUPS }}]
              awsSecurityGroupNames: [${{ secrets.AWS_SECURITY_GROUP_NAMES }}]
              awsSubnetID: "${{ secrets.AWS_SUBNET_ID }}"
              awsVpcID: "${{ secrets.AWS_VPC_ID }}"
              awsZoneLetter: "${{ vars.AWS_ZONE_LETTER }}"
              awsRootSize: ${{ vars.AWS_ROOT_SIZE }}
              awsRoute53Zone: "${{ secrets.AWS_ROUTE_53_ZONE }}"
              awsUser: "${{ secrets.AWS_USER }}"
              sshConnectionType: "${{ vars.SSH_CONNECTION_TYPE }}" 
              timeout: "${{ vars.TIMEOUT }}"
              windowsAMI: "${{ secrets.WINDOWS_AMI }}"
              windowsAWSUser: "${{ secrets.AWS_WINDOWS_USER }}" 
              windowsAWSPassword: "${{ secrets.AWS_WINDOWS_PASSWORD }}"
              windowsInstanceType: "${{ vars.AWS_WINDOWS_INSTANCE_TYPE }}"
              windowsKeyName: "${{ secrets.WINDOWS_SSH_PRIVATE_KEY_NAME }}"
              ipAddressType: "${{ vars.IP_ADDRESS_TYPE }}"
              loadBalancerType: "${{ vars.LOAD_BALANCER_TYPE }}"
              targetType: "${{ vars.TARGET_TYPE }}"
            standalone:
              bootstrapPassword: "${{ secrets.RANCHER_ADMIN_PASSWORD }}"
              certManagerVersion: "${{ vars.CERT_MANAGER_VERSION }}"
              osUser: "${{ secrets.OS_USER }}"
              osGroup: "${{ secrets.OS_GROUP }}"
              rancherChartRepository: "${{ secrets.RANCHER_HELM_CHART_URL }}"
              rancherHostname: "${{ env.HOSTNAME_PREFIX }}.${{ secrets.AWS_ROUTE_53_ZONE }}"
              rancherImage: "${{ secrets.RANCHER_IMAGE }}"
              rancherAgentImage: "${{ secrets.RANCHER_AGENT_IMAGE }}"
              rancherTagVersion: "${{ env.RANCHER_VERSION }}"
              repo: "${{ secrets.RANCHER_REPO }}"
              rke2Version: "${{ env.RKE2_VERSION }}"
          terratest:
            pathToRepo: "${{ secrets.PATH_TO_REPO }}"
            nodeCount: ${{ vars.NODE_COUNT }}
            windowsNodeCount: ${{ vars.WINDOWS_NODE_COUNT }}
          EOF

      - name: Export CATTLE_TEST_CONFIG
        run: echo "CATTLE_TEST_CONFIG=${{ github.workspace }}/config.yaml" >> $GITHUB_ENV
        shell: bash

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Build Packages
        run: ./.github/scripts/build-packages.sh

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Run Sanity Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          package: ${{ env.PACKAGE }}
          path-to-repo: ${{ secrets.PATH_TO_REPO }}
          suite: ${{ env.SUITE }}
          timeout: ${{ env.TIMEOUT }}

      - name: Reporting Results to Qase
        if: always()
        uses: ./.github/actions/report-to-qase
        with:
          qase-test-run-id: ${{ env.QASE_TEST_RUN_ID }}
          qase-automation-token: ${{ secrets.QASE_TOKEN }}

      - name: Reporting Results to Slack
        uses: ./.github/actions/report-to-slack
        with:
          job-status: ${{ job.status }}
          slack-channel: ${{ secrets.SLACK_CHANNEL }}
          slack-token: ${{ secrets.SLACK_TOKEN }}